// <auto-generated />
using System;
using ExpenseTracker.Repository.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExpenseTracker.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240722103405_ScheduledEndDate")]
    partial class ScheduledEndDate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExpenseTracker.Repository.Models.Account", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SavingsAccountID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ExpenseTracker.Repository.Models.Category", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("BudgetCap")
                        .HasColumnType("float");

                    b.Property<string>("Indicator")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ExpenseTracker.Repository.Models.SavingsAccount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<double>("AmountPerMonth")
                        .HasColumnType("float");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TargetAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.ToTable("SavingsAccounts");
                });

            modelBuilder.Entity("ExpenseTracker.Repository.Models.Scheduled", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Indicator")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TimeIntervalInDays")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("ExpenseTracker.Repository.Models.Transaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Indicator")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("CategoryName");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("ExpenseTracker.Repository.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPremuium")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("SavingsAccountID")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "userId1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "37d90753-99de-443b-a093-b273c8d2d50d",
                            Email = "ivan.ivanovic123gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            IsPremuium = false,
                            LastName = "Ivanovic",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEEb9wWptHIYJwiN6uuuH1KmF42eEAo+S2uO3QLaiXzscmvBQULKrqiUhSCQAQwQkPg==",
                            PhoneNumberConfirmed = false,
                            SavingsAccountID = 0,
                            SecurityStamp = "8c52ba71-1e30-4f3a-bba4-963b2e8bdcd9",
                            TwoFactorEnabled = false,
                            UserName = "ivan1234"
                        },
                        new
                        {
                            Id = "userId2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92556250-cb18-4a7c-8a1a-63bd4052a0c3",
                            Email = "jovan.ivanovic123gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jovan",
                            IsPremuium = false,
                            LastName = "Ivanovic",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEMZkQh9IelGA1iKnoCv5od75FvFGJKRSMcFvz1ZRcD3Tashk2x7CT+PdUktyyG776A==",
                            PhoneNumberConfirmed = false,
                            SavingsAccountID = 0,
                            SecurityStamp = "e22fa06d-f8e5-4f5a-86dd-ad1d4bc1fff2",
                            TwoFactorEnabled = false,
                            UserName = "jovan1234"
                        },
                        new
                        {
                            Id = "userId3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "12a55ccc-a6c8-4b55-bf9c-479540b7a882",
                            Email = "milica.bulat@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Milica",
                            IsPremuium = false,
                            LastName = "Bulatovic",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEE+d+SSRPj5hR2BKWWUEyMHKo6ZzmQALZ1F3Cb472IKqFP7KPRHwuv1zghJbsFmD1A==",
                            PhoneNumberConfirmed = false,
                            SavingsAccountID = 0,
                            SecurityStamp = "2015f3e6-466d-4e32-8993-666b9d51b56f",
                            TwoFactorEnabled = false,
                            UserName = "milica1234"
                        },
                        new
                        {
                            Id = "userId4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "18a1cfb8-8169-4527-89e6-06c48b197bec",
                            Email = "ivana.milos@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivana",
                            IsPremuium = false,
                            LastName = "Milosevic",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJD/S5pznc68WD4pN3RaXfdmMIe0+H8W+JWB53SHtDBpBiGJRoFeVmIeP1xmHzrykA==",
                            PhoneNumberConfirmed = false,
                            SavingsAccountID = 0,
                            SecurityStamp = "e86c2a9c-0c47-42cf-8b89-8b902bd6189d",
                            TwoFactorEnabled = false,
                            UserName = "ivana123456"
                        },
                        new
                        {
                            Id = "userId5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3613c0a8-ae21-4e28-83ec-9c06894d15eb",
                            Email = "kaca.bulat@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Katarina",
                            IsPremuium = false,
                            LastName = "Bulatovic",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEFdoQTB2yKuuaqk+hIecM0WB4kvGTDV35eGz6yAjwLgiGDrM8P4dWlwEe5QOJ/skWw==",
                            PhoneNumberConfirmed = false,
                            SavingsAccountID = 0,
                            SecurityStamp = "2ce92253-7b34-48cf-8eae-a07f0fe5bc36",
                            TwoFactorEnabled = false,
                            UserName = "katarina1234"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "0",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "1",
                            Name = "Premium"
                        },
                        new
                        {
                            Id = "2",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "userId1",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "userId2",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "userId3",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "userId4",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "userId5",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("ExpenseTracker.Repository.Models.Account", b =>
                {
                    b.HasOne("ExpenseTracker.Repository.Models.User", "user")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("ExpenseTracker.Repository.Models.Category", b =>
                {
                    b.HasOne("ExpenseTracker.Repository.Models.User", "User")
                        .WithMany("Categories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExpenseTracker.Repository.Models.SavingsAccount", b =>
                {
                    b.HasOne("ExpenseTracker.Repository.Models.Account", "Account")
                        .WithOne("SavingsAccount")
                        .HasForeignKey("ExpenseTracker.Repository.Models.SavingsAccount", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ExpenseTracker.Repository.Models.Scheduled", b =>
                {
                    b.HasOne("ExpenseTracker.Repository.Models.Account", "Account")
                        .WithMany("ScheduledTransactions")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ExpenseTracker.Repository.Models.Transaction", b =>
                {
                    b.HasOne("ExpenseTracker.Repository.Models.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExpenseTracker.Repository.Models.Category", "Category")
                        .WithMany("TransactionsPerCategory")
                        .HasForeignKey("CategoryName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ExpenseTracker.Repository.Models.Account", b =>
                {
                    b.Navigation("SavingsAccount")
                        .IsRequired();

                    b.Navigation("ScheduledTransactions");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("ExpenseTracker.Repository.Models.Category", b =>
                {
                    b.Navigation("TransactionsPerCategory");
                });

            modelBuilder.Entity("ExpenseTracker.Repository.Models.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Categories");
                });
#pragma warning restore 612, 618
        }
    }
}
